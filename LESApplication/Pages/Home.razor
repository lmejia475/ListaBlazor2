@page "/"
@using LESApplication.Models
@using LESApplication.Services

<PageTitle>LES</PageTitle>

<h1>Lista Enlazada Simple</h1>

<input type="text" name="valor" @bind-value="Valor" class="form-control" />
<button @onclick="AgregarInicio" class="btn btn-success">Agregar nodo al Inicio</button>
<button @onclick="AgregarFinal" class="btn btn-primary">Agregar nodo al final</button>
<button @onclick="OrdenarLista" class="btn btn-secondary">Ordenar Lista</button>
<input type="text" name="valorBuscar" @bind-value="ValorBuscar" class="form-control" placeholder="Buscar nodo" />
<button @onclick="BuscarNodoEnLista" class="btn btn-info">Buscar Nodo</button>
<p>@MensajeBusqueda</p>

<input type="text" name="valor" @bind-value="ValorX" class="form-control" />
<button @onclick="AgregarDespuesDeX" class="btn btn-warning">Agregar después de X</button>
<button @onclick="AgregarAntesDeX" class="btn btn-warning">Agregar antes de X</button>
<p>@Mensaje</p>


<input type="number" name="posicion" @bind-value="Posicion" class="form-control" placeholder="Posición en la lista" min="1" />
<button @onclick="AgregarEnPosicion" class="btn btn-success">Agregar en la posición</button>
<button @onclick="AgregarAntesDePosicion" class="btn btn-danger">Agregar antes de Posición</button>
<button @onclick="AgregarDespuesDePosicion" class="btn btn-danger">Agregar despues de Posición</button>
<p>@MensajePosicion</p>

<button @onclick="MostrarRecorridoRecursivo" class="btn btn-dark">Recorrido Recursivo</button>
<p>@RecorridoRecursivo</p>

<input type="text" name="valorEliminar" @bind-value="ValorEliminar" class="form-control" placeholder="Dato X" />
<button @onclick="EliminarDespuesDeX" class="btn btn-morado">Eliminar después de X</button>
<button @onclick="EliminarAntesDeX" class="btn btn-morado">Eliminar antes de X</button>
<p>@MensajeEliminar</p>

<input type="number" name="posicionEliminar" @bind-value="PosicionEliminar" class="form-control" placeholder="Posición" />
<button @onclick="EliminarEnPosicion" class="btn btn-morado">Eliminar en posición</button>
<p>@MensajeEliminarPosicion</p>

<button @onclick="EliminarNodoAlFinal" class="btn btn-danger">Eliminar Nodo Final</button>
<p>@MensajeEliminarFinal</p>

<button @onclick="EliminarNodoAlInicio" class="btn btn-danger">Eliminar Nodo al Inicio</button>
<p>@MensajeEliminarInicio</p>



<ul class="list-group">
    @{
        Nodo nodoTemporal = Lista.PrimerNodo;
        while (nodoTemporal != null)
        {
            <li class="list-group-item">@nodoTemporal.Informacion</li>
            nodoTemporal = nodoTemporal.Referencia;
        }
    }
</ul>

<style>
    .btn-morado {
        background-color: #6f42c1; 
        color: white; 
        border: none; 
    }
    .btn-morado:hover {
            background-color: #5a34a1; 
        }

</style> 

@code {
    public string Valor { get; set; }
    public string ValorBuscar { get; set; }
    public string MensajeBusqueda { get; set; }
    public string ValorX { get; set; }
    public string Mensaje { get; set; }
    public string MensajePosicion { get; set; }
    public string MensajeEliminarFinal { get; set; }
    public string MensajeEliminarInicio { get; set; }
    public int Posicion { get; set; }
    public string RecorridoRecursivo { get; set; }
    public string ValorEliminar { get; set; }
    public string MensajeEliminar { get; set; }
    public int PosicionEliminar { get; set; }
    public string MensajeEliminarPosicion { get; set; }

    public LES Lista { get; set; }

    protected override void OnInitialized()
    {
        Lista = new LES();
        base.OnInitialized();
    }

    public void AgregarFinal()
    {
        Lista.AgregarNodoFinal(CrearNodo());
    }
    public void AgregarInicio()
    {
        Lista.AgregarNodoInicio(CrearNodo());
    }

    public void MostrarRecorridoRecursivo()
    {
    RecorridoRecursivo = Lista.RecorrerRecursivo(Lista.PrimerNodo);
    }

    public void BuscarNodoEnLista()
    {
        Nodo? nodoEncontrado = Lista.BuscarNodo(ValorBuscar);

        if (nodoEncontrado != null)
        {
            MensajeBusqueda = $"Nodo '{ValorBuscar}' encontrado en memoria: {nodoEncontrado.GetHashCode()}";
        }
        else
        {
            MensajeBusqueda = "Nodo X no encontrado";
        }
    }
    public void AgregarDespuesDeX()
    {
        if (!string.IsNullOrEmpty(ValorX) && !string.IsNullOrEmpty(Valor))
        {

            string mensaje = Lista.AgregarNodoDespuesDeX(ValorX, Valor);

            if (mensaje == "Nodo X no encontrado")
            {
                Mensaje = "Nodo X no existe";
            }
            else
            {
                Mensaje = $"Nodo '{Valor}' agregado después de '{ValorX}'";
            }
        }
        else
        {
            Mensaje = "ValorX o Valor no pueden ser nulos o vacíos";
        }
    }
    public void AgregarAntesDeX()
    {
        if (!string.IsNullOrEmpty(ValorX) && !string.IsNullOrEmpty(Valor))
        {

            string mensaje = Lista.AgregarNodoAntesDeX(ValorX, Valor);


            if (mensaje == "Nodo X no encontrado")
            {
                Mensaje = "Nodo X no existe";
            }
            else
            {
                Mensaje = $"Nodo '{Valor}' agregado antes de '{ValorX}'";
            }
        }
        else
        {
            Mensaje = "ValorX o Valor no pueden ser nulos o vacíos";
        }
    }
    public void AgregarAntesDePosicion()
    {
        if (!string.IsNullOrEmpty(Valor) && Posicion >= 0)
        {
            string mensaje = Lista.AgregarNodoAntesDePosicion(Posicion, Valor);
            MensajePosicion = mensaje;
        }
        else
        {
            MensajePosicion = "Ingrese un valor y una posición válida.";
        }
    }
    public void AgregarEnPosicion()
    {
        if (!string.IsNullOrEmpty(Valor) && Posicion >= 0)
        {
            string mensaje = Lista.InsertarEnPosicion(Posicion, CrearNodo());
            MensajePosicion = mensaje;
        }
        else
        {
            MensajePosicion = "Ingrese un valor y una posición válida.";
        }
    }

    public void AgregarDespuesDePosicion()
    {
        if (!string.IsNullOrEmpty(Valor) && Posicion >= 0)
        {
            string mensaje = Lista.InsertarDespuesDePosicion(Posicion, CrearNodo());
            MensajePosicion = mensaje;
        }
        else
        {
            MensajePosicion = "Ingrese un valor y una posición válida.";
        }
    }

    public void EliminarDespuesDeX()
    {
        if (!string.IsNullOrEmpty(ValorEliminar))
        {
            string mensaje = Lista.EliminarNodoDespuesDeX(ValorEliminar);
            MensajeEliminar = mensaje;
        }
        else
        {
            MensajeEliminar = "Ingrese un valor para eliminar después de X.";
        }
    }

    public void EliminarAntesDeX()
    {
        if (!string.IsNullOrEmpty(ValorEliminar))
        {
            string mensaje = Lista.EliminarNodoAntesDeX(ValorEliminar);
            MensajeEliminar = mensaje;
        }
        else
        {
            MensajeEliminar = "Ingrese un valor para eliminar antes de X.";
        }
    }


    public void EliminarEnPosicion()
    {
        if (PosicionEliminar > 0)
        {
            string mensaje = Lista.EliminarNodoEnPosicion(PosicionEliminar);
            MensajeEliminarPosicion = mensaje;
        }
        else
        {
            MensajeEliminarPosicion = "Ingrese una posición válida mayor a 0.";
        }
    }

    public void EliminarNodoAlFinal()
    {

            string mensaje = Lista.EliminarNodoAlFinal();
            MensajeEliminarFinal = mensaje;
    }

    public void EliminarNodoAlInicio()
    {

        string mensaje = Lista.EliminarNodoAlInicio();
        MensajeEliminarInicio = mensaje;
    }

    public void OrdenarLista()
    {
        Lista.OrdenarLista();
    }

    Nodo CrearNodo()
    {
        Nodo nuevoNodo = new Nodo(Valor);
        return nuevoNodo;
    }


}