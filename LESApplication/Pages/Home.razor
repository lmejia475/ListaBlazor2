@page "/"
@using LESApplication.Models
@using LESApplication.Services

<PageTitle>LES</PageTitle>

<h1>Lista Enlazada Simple</h1>

<input type="text" name="valor" @bind-value="Valor" class="form-control" />
<button @onclick="AgregarInicio" class="btn btn-success">Agregar nodo al Inicio</button>
<button @onclick="AgregarFinal" class="btn btn-primary">Agregar nodo al final</button>
<button @onclick="AgregarEnPosicion" class="btn btn-secondary">Agregar en posición 5</button>
<button @onclick="AgregarAntesDePosicion" class="btn btn-secondary">Agregar antes de posición 5</button>
<button @onclick="AgregarDespuesDePosicion" class="btn btn-secondary">Agregar después de posición 5</button>
<p>@Mensaje</p>
<input type="text" name="valorBuscar" @bind-value="ValorBuscar" class="form-control" placeholder="Buscar nodo" />
<button @onclick="BuscarNodoEnLista" class="btn btn-info">Buscar Nodo</button>
<p>@MensajeBusqueda</p>



<input type="text" name="valor" @bind-value="ValorX" class="form-control" />
<button @onclick="AgregarDespuesDeX" class="btn btn-warning">Agregar despues de X</button>
<button @onclick="AgregarAntesDeX" class="btn btn-warning">Agregar antes de X</button>
<p>@Mensajep</p>





<ul class="list-group">
    @{
        Nodo nodoTemporal = Lista.PrimerNodo;
        while (nodoTemporal != null)
        {
            <li class="list-group-item">@nodoTemporal.Informacion</li>
            nodoTemporal = nodoTemporal.Referencia;
        }
    }
</ul>

@code {
    public string Valor { get; set; }
    public string ValorBuscar { get; set; }
    public string MensajeBusqueda { get; set; }
    public string ValorX { get; set; }
    public string Mensaje { get; set; }
    public string Mensajep{ get; set; }
    public int Posicion{ get; set; }

    public LES Lista { get; set; }

    protected override void OnInitialized()
    {
        Lista = new LES();
        base.OnInitialized();
    }

    public void AgregarFinal()
    {
        Lista.AgregarNodoFinal(CrearNodo());
    }
    public void AgregarInicio()
    {
        Lista.AgregarNodoInicio(CrearNodo());
    }
    public void BuscarNodoEnLista()
    {
        Nodo? nodoEncontrado = Lista.BuscarNodo(ValorBuscar);

        if (nodoEncontrado != null)
        {
            MensajeBusqueda = $"Nodo '{ValorBuscar}' encontrado en memoria: {nodoEncontrado.GetHashCode()}";
        }
        else
        {
            MensajeBusqueda = "Nodo X no encontrado";
        }
    }
    public void AgregarDespuesDeX()
    {
        if (!string.IsNullOrEmpty(ValorX) && !string.IsNullOrEmpty(Valor))
        {

            string mensajep = Lista.AgregarNodoDespuesDeX(ValorX, Valor);

            if (mensajep == "Nodo X no encontrado")
            {
                Mensajep = "Nodo X no existe";
            }
            else
            {
                Mensajep = $"Nodo '{Valor}' agregado después de '{ValorX}'";
            }
        }
        else
        {
            Mensajep = "ValorX o Valor no pueden ser nulos o vacíos";
        }

        
    }
    public void AgregarAntesDeX()
    {
        if (!string.IsNullOrEmpty(ValorX) && !string.IsNullOrEmpty(Valor))
        {

            string mensajep = Lista.AgregarNodoAntesDeX(ValorX, Valor);


            if (mensajep == "Nodo X no encontrado")
            {
                Mensajep = "Nodo X no existe";
            }
            else
            {
                Mensajep = $"Nodo '{Valor}' agregado antes de '{ValorX}'";
            }
        }
        else
        {
            Mensajep= "ValorX o Valor no pueden ser nulos o vacíos";
        }
       
    }
    public void AgregarEnPosicion()
    {
        try
        {
            Lista.AgregarEnPosicion(5, Valor);
            Mensaje = $"Nodo '{Valor}' agregado en posición {5}";
        }
        catch (Exception ex)
        {
            Mensaje = ex.Message;
        }
    }

    public void AgregarAntesDePosicion()
    {
        try
        {
            Lista.AgregarAntesDePosicion(5, Valor);
            Mensaje = $"Nodo '{Valor}' agregado antes de la posición {5}";
        }
        catch (Exception ex)
        {
            Mensaje = ex.Message;
        }
    }

    public void AgregarDespuesDePosicion()
    {
        try
        {
            Lista.AgregarDespuesDePosicion(5, Valor);
            Mensaje = $"Nodo '{Valor}' agregado después de la posición {5}";
        }
        catch (Exception ex)
        {
            Mensaje = ex.Message;
        }
    }


    Nodo CrearNodo()
    {
        Nodo nuevoNodo = new Nodo(Valor);
        return nuevoNodo;
    }


}